{"version":3,"sources":["Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Todoinput","handleInput","e","keyCode","props","add","target","value","setState","name","handleChange","bind","state","a","id","ref","onChange","this","onKeyDown","type","placeholder","Component","Todoing","todo","map","item","idx","key","onClick","del","defaultProps","Todolist","addItem","data","delItem","console","log","filter","index","doingCount","JSON","parse","localStorage","getItem","todoList","obj","b","o","Object","assign","c","keys","forEach","count","ReactDOM","render","document","getElementById"],"mappings":"4QAGqBA,E,YACjB,aAAc,IAAD,8BACT,+CAMJC,YAAc,SAACC,GAEM,KAAdA,EAAEC,UACD,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,OACxB,EAAKC,SAAL,eACKN,EAAEI,OAAOG,KAAM,OAZf,EAmBbC,aAAe,SAACR,GACZ,EAAKM,SAAL,eACKN,EAAEI,OAAOG,KAAMP,EAAEI,OAAOC,SAnB7B,EAAKN,YAAc,EAAKA,YAAYU,KAAjB,gBACnB,EAAKC,MAAQ,CACTC,EAAE,IAJG,E,sEA+BT,OACI,6BACI,2BAAOC,GAAG,MAAMC,IAAI,IAAIN,KAAK,IAAIO,SAAUC,KAAKP,aAAcH,MAAOU,KAAKL,MAAMC,EAAGK,UAAWD,KAAKhB,YAAakB,KAAK,OAAOC,YAAY,0B,GAlCjHC,aCAlBC,E,iLAKP,IAAD,OACAC,EAAQN,KAAKb,MAAbmB,KACL,OACI,6BACI,4BACIA,EAAKC,KAAI,SAACC,EAAKC,GAEX,OAAO,wBAAIC,IAAKD,GACJ,2BAAOP,KAAK,aACXM,EAFN,MAGK,4BAAQG,QAAS,SAAC1B,GAAD,OAAK,EAAKE,MAAMyB,IAAIH,EAAIxB,KAAzC,0B,GAfCmB,aA8BrCC,EAAQQ,aAAe,CACnBP,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,I,IC9BGQ,E,YACjB,aAAc,IAAD,uBACT,+CA4BJC,QAAU,SAACC,GAGP,EAAKzB,SAAS,CACVe,KAAK,GAAD,mBAAK,EAAKX,MAAMW,MAAhB,CAAqBU,MAC3B,gBAlCO,EAsCbC,QAAU,SAACR,EAAIxB,GAEXiC,QAAQC,IAAIV,EAAIxB,GAIhB,EAAKM,UAAS,SAACI,EAAMR,GAIjB,OADA+B,QAAQC,IAAIxB,EAAMW,MACZ,CAEFA,KAAKX,EAAMW,KAAKc,QAAO,SAACZ,EAAKa,GAAN,OAAcZ,IAAMY,UAlD1C,EA8DbC,WAAa,aA3DV,IAAIhB,EAAOiB,KAAKC,MAAMC,aAAaC,QAAQ,SAEvC,EAAK/B,MADI,OAATW,EACa,CACTqB,SAAU,IAGD,CACTA,SAAUrB,GAIjB,IAAIsB,EAAM,CAAChC,EAAE,IAAIiC,EAAE,CAAC,EAAE,EAAE,IAGpBC,EAAIC,OAAOC,OAAO,GAAGJ,EAFd,CAACK,EAAE,MAfL,OAqBTf,QAAQC,IAAIW,IAAMF,GAElBG,OAAOG,KAAKN,GAAKO,SAAQ,SAAC3B,GACtBU,QAAQC,IAAIX,EAAKoB,EAAIpB,OAxBhB,E,sEAkET,OACI,6BACI,gCACI,iCACI,2CACA,kBAAC,EAAD,CAAWpB,IAAKY,KAAKe,YAG7B,6BACI,iCACI,uDAEI,0BAAMqB,MAAOpC,KAAKsB,YAAlB,MAEJ,kBAAC,EAAD,CAASV,IAAKZ,KAAKiB,QAASX,KAAMN,KAAKL,MAAMW,OAC7C,uDAEI,2C,GApFUF,aCCtCiC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,W","file":"static/js/main.331d3e90.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n//受控组件：value值被react控制的表单元素\r\n//可以实时获取表单元素的值（表单验证）/写法相对麻烦\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state = {\r\n            a:''\r\n        }\r\n    }\r\n    handleInput = (e)=>{\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){\r\n            this.props.add(e.target.value);\r\n            this.setState({\r\n                [e.target.name]:''\r\n                \r\n            })\r\n        };\r\n    }\r\n\r\n   \r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]:e.target.value\r\n            \r\n        })\r\n    }\r\n\r\n    // componentDidMount(){\r\n    //     console.log(this);\r\n    //     this.refs.a.focus();\r\n    // }\r\n    render() {\r\n        return (\r\n            <div>          \r\n                <input id=\"inp\" ref='a' name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type='text' placeholder='添加ToDo'></input>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n/**\r\n * 受控组件：\r\n * 1、给input标签添加value属性，赋值为state的值\r\n * 2、给input标签绑定onChange事件，在事件处理函数中setState\r\n * 3、一个事件处理函数控制多个表单元素时，给input标签加上name属性，事件处理函数中写；\r\n * setState({[e.target.name]:e.target.value})\r\n * \r\n */","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Todoing extends Component {\r\n    // delItem(idx,e){\r\n    //     this.props.del(idx);\r\n    //     console.log(e);\r\n    // }\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <div>\r\n                <ul>{\r\n                    todo.map((item,idx) => {//map循环\r\n                        // return <li key={idx}>{item}---<button onClick={this.delItem.bind(this,idx)}>删除</button></li>\r\n                        return <li key={idx}>\r\n                                    <input type=\"checkbox\"/>\r\n                                    {item}---\r\n                                    <button onClick={(e)=>this.props.del(idx,e)}>\r\n                                        删除\r\n                                    </button>\r\n                                </li>\r\n                    })\r\n                }</ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes = {//类型检查\r\n    todo:PropTypes.array,\r\n    del:PropTypes.func\r\n}\r\n\r\nTodoing.defaultProps = {//设置默认值\r\n    todo:[1,2,3,4,5]\r\n}","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n       // 获取 localStorage\r\n       let todo = JSON.parse(localStorage.getItem('todo'));\r\n       if (todo === null) {\r\n           this.state = {\r\n               todoList: []\r\n           }\r\n       } else {\r\n           this.state = {\r\n               todoList: todo\r\n           }\r\n       }\r\n        //深拷贝\\浅拷贝\r\n        var obj = {a:100,b:[1,2,3]}; \r\n        var obj1 = {c:300};\r\n        // var o = {...obj};\r\n        var o = Object.assign({},obj,obj1);\r\n        // var o = JSON.parse(JSON.stringify(obj));\r\n        // o.a = 200;\r\n        // o.b[0] = 200;\r\n        console.log(o === obj);\r\n        // console.log(Object.keys(obj));//[\"a\", \"b\"]\r\n        Object.keys(obj).forEach((item)=>{\r\n            console.log(item,obj[item]);\r\n            // console.log(obj[item]);//变量用中括号访问\r\n        })\r\n\r\n    }\r\n    addItem = (data)=>{\r\n        // this.state.todo.push(data);\r\n        // console.log(this.state.todo);\r\n        this.setState({//异步的\r\n            todo:[...this.state.todo,data]\r\n        },()=>{\r\n            // localStorage.setItem('',JSON.stringify(data));\r\n        })\r\n    }\r\n    delItem = (idx,e)=>{\r\n        //1、不能直接改变或处理state，通过setState改变\r\n        console.log(idx,e);\r\n        // let todo = [...this.state.todo];①\r\n        // todo.splice(idx,1);①\r\n        //2、setState是异步执行\r\n        this.setState((state,props)=>{\r\n            // let todo = [...this.state.todo];②\r\n            // todo.splice(idx,1);②\r\n            console.log(state.todo);\r\n            return{\r\n                // todo:todo①②\r\n                todo:state.todo.filter((item,index)=>idx!==index)//③\r\n            }\r\n        })\r\n\r\n        //在setState里获取state可能会出错，不是你想要的值\r\n        //可以像上面那样，把第一个参数写成函数\r\n        // this.setState({\r\n        //     todo:this.state.num + 100\r\n        // },()=>{\r\n        //     console.log(this.state.todo);\r\n        // })        \r\n    }\r\n    doingCount = ()=>{\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <header>\r\n                    <section>\r\n                        <label>ToDoList</label>\r\n                        <Todoinput add={this.addItem}/>\r\n                    </section>\r\n                </header>\r\n                <div>\r\n                    <section>\r\n                        <h2>\r\n                            正在进行\r\n                            <span count={this.doingCount}>3</span>\r\n                        </h2>\r\n                        <Todoing del={this.delItem} todo={this.state.todo}/>\r\n                        <h2>\r\n                            已经完成\r\n                            <span>4</span>\r\n                        </h2>\r\n                    </section>\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todolist from './Todolist/Todolist';\n\nReactDOM.render(<Todolist />, document.getElementById('root'));\n\n"],"sourceRoot":""}